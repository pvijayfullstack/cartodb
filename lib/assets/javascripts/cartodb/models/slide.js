
/**
 * contains and manages the state for an slide
 */
cdb.admin.Slide = cdb.core.Model.extend({

   LAYER_TRACKED_PROPERTIES: ['tile_style', 'query', 'visible', 'filters', 'tile_style_custom'],

  initialize: function() {
    this.bind('change:map', this._bindMap);
  },

  getObjState: function(obj) {
    return this.get(obj.id);
  },

  copyAttr: function(obj, attrs) {
    this.set(obj.id, attrs);
  },

  setAttr: function(obj, attrs) {
    obj.set(attrs || this.get(obj.id));
  },

  // track object state using restore and serialize
  _trackObject: function(obj, properties, restore, serialize) {
    if (obj.isNew()) {
      throw new Error("tracked object need id");
    }

    serialize = serialize || this.copyAttr;
    restore = restore || this.setAttr;

    // copy current state
    serialize.call(this, obj, _.pick(obj.attributes, properties));

    // change state when slide changes
    this.bind('change:active', function() {
      if (this.isActive()) {
        var changes = this.get(obj.id);
        if (Object.keys(changes).length) {
          restore.call(this, obj, changes);
        }
      }
    });

    // build list of properties to listen
    var listen = 'change';
    if (properties && properties.length) {
      listen = properties.map(function(p) {
        return 'change:' + p;
      }).join(' ');
    }

    // serialize object state to slide
    obj.bind(listen, function() {
      if (this.isActive()) {
        serialize.call(this, obj, properties ? _.pick(obj.attributes, properties): obj.attributes);
      }
    }, this);

    obj.bind('destroy', function() {
      obj.unbind(listen + " destroy", null, this);
      this.unset(obj.id);
    }, this);

  },

  _bindMap: function(map) {
    this.map = this.get('map');
    this._trackObject(this.map, ['center', 'zoom']);
    _.each(this.map.layers.getDataLayers(), this._bindLayer.bind(this));
  },

  // get all the data needed for layer
  _serializeLayer: function(layer) {
    var a = _.pick(layer.attributes, this.LAYER_TRACKED_PROPERTIES);
    a.infowindow = layer.infowindow.toJSON();
    a.legend = layer.legend.toJSON();
    a.wizard_properties = layer.wizard_properties.toJSON();
    this.copyAttr(layer, a);
  },

  _restoreLayer: function(layer, attrs) {
    // when filters are present don't apply sql query
    // it will be generated by filters
    var applyQuery = null;
    if (attrs.filter) {
      delete attrs.query;
    }
    if (attrs.query) {
      applyQuery = attrs.query;
    }

    if (attrs.tile_style_custom) {
    }

    var wizard_properties = attrs.wizard_properties;
    var infowindow = attrs.infowindow;
    delete attrs.wizard_properties;
    delete attrs.infowindow;

    // don't change query directly, use applySQLView
    delete attrs.query;

    if (applyQuery) {
      layer.applySQLView(applyQuery);
    } else {
      layer.clearSQLView();
    }

    var s = {};
    for (var attr in attrs) {
      val = attrs[attr];
      // If the new and current value differ, record the change.
      if (!_.isEqual(layer.get(attr), val)) {
        s[attr] = val;
      }
    }
    layer.set(s);

    // infowindow
    layer.infowindow.set(infowindow);
    // wizard
    layer.wizard_properties.set(wizard_properties);
  },


  // track sql, cartocss
  _bindLayer: function(layer) {
    this._trackObject(layer, 
      this.LAYER_TRACKED_PROPERTIES, 
      this._restoreLayer,
      this._serializeLayer
    );

    function _forceSerialize() {
      if (this.isActive()) {
        this._serializeLayer(layer);
      }
    };

    layer.wizard_properties.bind('change', _forceSerialize, this);
    layer.legend.bind('change', _forceSerialize, this);
    layer.infowindow.bind('change', _forceSerialize, this);
  },

  isActive: function() {
    return !!this.get('active');
  }

});

/**
 * slide collection
 */
cdb.admin.Slides = Backbone.Collection.extend({

  model: cdb.admin.Slide,

  initialize: function(models, options) {
    if (!options || !options.map) {
      throw new Error("map is undefined");
    }

    this.map = options.map;

    var self = this;
    var _setMap = function(m) { 
      m.set('map', self.map);
    };
    this.bind('add', _setMap, this);
    this.bind('reset', function() { this.each(_setMap); }, this);
  },

  setActive: function(slide) {
    var active = this.find(function (s) {
      return s.get('active');
    });
    if (active) {
      active.set('active', false);
    }
    slide.set('active', true);
  }



});
