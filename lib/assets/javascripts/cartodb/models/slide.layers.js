
cdb.admin.Slide.Layers = {};

cdb.admin.Slide.Layers.CartoDB = function(layer) {
   this.layer = layer;
   this.LAYER_TRACKED_PROPERTIES = ['tile_style', 'query', 'visible', 'filters', 'tile_style_custom', 'type'];
}

_.extend(cdb.admin.Slide.Layers.CartoDB.prototype, {

  track: function(layer, slide) {

    slide._trackObject(layer, this.LAYER_TRACKED_PROPERTIES,
      this._restoreLayer.bind(this),
      this._serializeLayer.bind(this)
    );

    var self = this;
    _.each(['wizard_properties', 'legend', 'infowindow'], function(subModel) {
      var generic = new cdb.admin.Slide.Generic(self.layer[subModel], null, { clear_on_restore: true, debug_name: subModel });
      generic.track(layer[subModel], slide);
    })

  },

  // get all the data needed for layer
  _serializeLayer: function(layer) {
    var attrs = _.pick(layer.attributes, this.LAYER_TRACKED_PROPERTIES);
    var s = {};
    for (var attr in attrs) {
      val = attrs[attr];
      if (!_.isEqual(this.layer.get(attr), val)) {
        s[attr] = val;
      }
    }
    //s = _.omit(s, 'id', 'parent_id')
    if (_.size(s)) {
      this.layer.save(s);
    }
  },

  _restoreLayer: function(layer) {
    var attrs = _.pick(this.layer.attributes, this.LAYER_TRACKED_PROPERTIES);

    // when filters are present don't apply sql query
    // it will be generated by filters
    var applyQuery = null;
    if (attrs.filter) {
      delete attrs.query;
    }

    if (attrs.query) {
      applyQuery = attrs.query;
    }

    // apply the query without waiting for sql view
    // we assume the query is ok if it's saved on the layer
    // delete attrs.query;

    if (applyQuery) {
      layer.applySQLView(applyQuery);
    } else {
      layer.clearSQLView();
    }

    var s = {};
    for (var attr in attrs) {
      val = attrs[attr];
      // If the new and current value differ, record the change.
      if (!_.isEqual(layer.get(attr), val)) {
        s[attr] = val;
      }
    }
    //s = _.omit(s, 'id', 'parent_id')
    if (_.size(s)) {
      layer.set(s);
    }
  }

});
