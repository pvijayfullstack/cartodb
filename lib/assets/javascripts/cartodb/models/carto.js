
function simple_polygon_generator(table, props) {
  var carto_props = _(props).map(function(v, k) {
    return "  " + k + ": " + v + ";";
  });

  return "#" + table + "{\n" + carto_props.join('\n') + "\n}";
}

cdb.admin.CartoStyles = Backbone.Model.extend({

    defaults: {
      type: 'polygon',
      properties: {
        'polygon-fill': '#FF6600',
        'line-color': '#FFFFFF',
        'line-width': 1,
        'polygon-opacity': 0.7,
        'line-opacity':1
      }
    },

    initialize: function() {
      this.table = this.get('table');
      this.bind('change:properties', this._generateCarto, this);
      this.table.bind('change:name', this._generateCarto, this);
      this.generators = {};
      this.registerGenerator('polygon', simple_polygon_generator);
    },

    registerGenerator: function(name, gen) {
      this.generators[name] = gen;
    },

    /**
     * generate a header to show the user the params carto was
     * generated from
     */
    _generateHeader: function() {
      var c = _t("/**\n * this carto style was generated by cartodb. http://cartodb.com\n");
      c +=       " * genetor type: " + this.get('type') + "\n";
      c +=       " * params: " + JSON.stringify(this.get('properties')) + "\n";
      c +=       " */\n\n";
      return c;
    },

    _generateCarto: function(){
      var gen = this.generators[this.get('type')];
      if(!gen) {
        cdb.log.error("can't get style generator for " + this.get('type'));
        return;
      }

      this.set({
        style: this._generateHeader() + gen(
          this.table.get('name'),
          this.get('properties')
        )
      });
    }

});
