var cdb = require('cartodb.js');
var _ = require('underscore');
var StylesFactory = require('./styles-factory');
var UndoManager = require('backbone-undo');

module.exports = cdb.core.Model.extend({

  parse: function (r) {
    r = r || {};
    return _.extend(
      {
        type: r.type,
        autogenerated: r && r.autogenerated
      },
      r.properties
    );
  },

  initialize: function (attrs, opts) {
    if (!this.get('type')) {
      this.setDefaultPropertiesByType('simple', 'point');
    }

    this._initUndoManager();
  },

  _initUndoManager: function () {
    this._undoManager = new UndoManager({
      register: this,
      track: true
    });

    _.each(['undo', 'redo'], function (eventType) {
      this._undoManager.bind(eventType, function () {
        this.trigger(eventType, this.changed, this);
      }, this);
    }, this);
  },

  setDefaultPropertiesByType: function (styleType, geometryType) {
    // Get default aggregation and properties from factory and apply them
    this.set(
      _.extend(
        {
          type: styleType
        },
        StylesFactory.getDefaultStyleAttrsByType(styleType, geometryType)
      )
    );
  },

  resetStyles: function () {
    this.setDefaultPropertiesByType('none', '');
  },

  // Backend will migrate current wizard properties to style properties,
  // providing a flag which indicates if it is generated by them
  isAutogenerated: function () {
    return this.get('autogenerated');
  },

  undo: function () {
    this._undoManager.undo();
  },

  redo: function () {
    this._undoManager.redo();
  },

  canUndo: function () {
    return this._undoManager.isAvailable('redo');
  },

  canRedo: function () {
    return this._undoManager.isAvailable('redo');
  },

  isAggregatedType: function () {
    return _.contains(StylesFactory.getAggregationTypes(), this.get('type'));
  },

  // Unflatten attributes
  toJSON: function () {
    return {
      type: this.get('type'),
      properties: _.omit(this.attributes, 'type', 'autogenerated')
    };
  }
});
