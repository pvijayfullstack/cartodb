var cdb = require('cartodb.js');
var _ = require('underscore');
var StylesFactory = require('./styles-factory');
var UndoManager = require('backbone-undo');

module.exports = cdb.core.Model.extend({

  parse: function (r) {
    var data = {};
    if (r) {
      data = _.extend(
        {
          type: r.type,
          autogenerated: r.autogenerated
        },
        r.aggregation,
        r.properties
      );
    }
    // Flatten attributes
    return data;
  },

  initialize: function (attrs, opts) {
    this._layerDefinitionModel = opts.layerDefinitionModel;
    this._initBinds();

    if (!this.get('type')) {
      this.set('type', 'simple');
    }

    this._undoManager = new UndoManager({
      register: this,
      track: true
    });
  },

  _initBinds: function () {
    this.bind('change:type', this._setDefaultProperties, this);
  },

  _setDefaultProperties: function () {
    // Set defaults only when type has been changed
    if (_.size(this.changed) > 1) {
      return false;
    }

    var styleType = this.get('type');
    var analysisNode = this._layerDefinitionModel.getAnalysisDefinitionNodeModel();
    var querySchemaModel = analysisNode.querySchemaModel;
    var geom = querySchemaModel.getGeometry();
    var simpleGeometryType = '';

    if (geom) {
      simpleGeometryType = geom.getSimpleType();
    }

    // Get default aggregation and properties from factory and apply them
    this.set(
      StylesFactory.getDefaultStyleAttrsByType(styleType, simpleGeometryType)
    );
  },

  resetStyles: function () {
    this.set('type', 'none');
  },

  // Backend will migrate current wizard properties to style properties,
  // providing a flag which indicates if it is generated by them
  isAutogenerated: function () {
    return this.get('autogenerated');
  },

  undo: function () {
    this._undoManager.undo();
  },

  redo: function () {
    this._undoManager.redo();
  },

  canUndo: function () {
    return this._undoManager.isAvailable('redo');
  },

  canRedo: function () {
    return this._undoManager.isAvailable('redo');
  },

  // Unflatten attributes
  toJSON: function () {
    return {
      type: this.get('type'),
      aggregation: _.reduce(this.attributes, function (memo, value, key) {
        if (_.contains(StylesFactory.getAggregationAttrs(), key)) {
          memo[key] = value;
        }
        return memo;
      }, {}, this),
      properties: _.reduce(this.attributes, function (memo, value, key) {
        if (!_.contains(StylesFactory.getAggregationAttrs(), key) && key !== 'type') {
          memo[key] = value;
        }
        return memo;
      }, {}, this)
    };
  }
});
